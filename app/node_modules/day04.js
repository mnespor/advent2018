'use strict'

const R = require('ramda')
const readLines = require('util/read-lines')
const sumNumeric = require('util/sum-numeric')

const input = R.sort(R.comparator(R.lt), R.filter(R.complement(R.isEmpty), readLines('input/04.txt')))
// I'm going straight to Hell for this
const dateFromISO8601 = R.constructN(1, Date)

const logEntry = line => {
    const [ _, timestamp, action, guardId ] = R.match(/\[(.*)\]\s(\D+)(\d*)/, line)
    return { date: dateFromISO8601(timestamp), action, guardId }
}

const entries = R.map(logEntry, input)
// { previousGuard, previousEntry, minutesByGuard  }
// minutesByGuard: { guardId: [Int] } where [Int] is night count by minute
const  { minutesByGuard } = R.reduce((acc, entry) => {
    const updateStateWithNewEntry = R.assoc('previousEntry', entry)
    if (entry.action === 'Guard #') {
        return R.merge(acc, {
            previousGuard: entry.guardId,
            previousEntry: entry
        })
    } else if (entry.action === 'falls asleep') {
        return updateStateWithNewEntry(acc)
    } else if (entry.action === 'wakes up') {
        const path = ['minutesByGuard', acc.previousGuard]
        const nightCountByMinute = R.pathOr([], path, acc)
        for (let minute of R.range(acc.previousEntry.date.getMinutes(), entry.date.getMinutes())) {
            nightCountByMinute[minute] = (nightCountByMinute[minute] || 0) + 1
        }

        return updateStateWithNewEntry(R.assocPath(path, nightCountByMinute, acc))
    }

    console.log(`unrecognized action in log entry ${JSON.stringify(entry)}`)
    return acc
}, {}, entries)

const totals = R.map(sumNumeric, minutesByGuard)
console.log(JSON.stringify(totals, null, 2))
// by guard, which guard spent the most time asleep in total?
// which minute of the night was that guard asleep the most days?

// part 2
const maxInList = R.compose(R.reduce(R.max, 0), R.filter(R.is(Number)))
const hottestMinute = R.map(maxInList, minutesByGuard)
console.log(JSON.stringify(hottestMinute, null, 2))
