'use strict'

const R = require('ramda')

const readLines = require('util/read-lines')

const claimExpression = /(\d+)\D+(\d+),(\d+): (\d+)x(\d+)/
const claim = line => {
    const match = line.match(claimExpression)
    if (match == null) {
        return { x: 0, y: 0, w: 0, h: 0 }
    }

    const [ _, id, x, y, w, h ] = R.map(R.unary(parseInt), match)
    return { id, x, y, w, h }
}

const input = readLines('input/03.txt')
const claims = R.map(claim, input)

// Have a set of points covered by at least one claim. When trying to add a point
// to the set for a second time, add it to the set of points covered by at least
// two claims.

const pointsCoveredByOneClaim = new Set()
const pointsCoveredByAtLeastTwoClaims = new Set()

for (let claim of claims) {
    for (let x = claim.x; x < claim.x + claim.w; x++) {
        for (let y = claim.y; y < claim.y + claim.h; y++) {
            let point = `${x},${y}`
            if (pointsCoveredByOneClaim.has(point)) {
                pointsCoveredByAtLeastTwoClaims.add(point)
            }

            pointsCoveredByOneClaim.add(point)
        }
    }
}

console.log('part 1:', pointsCoveredByAtLeastTwoClaims.size)

for (let claim of claims) {
    const points = new Set()
    for (let x = claim.x; x < claim.x + claim.w; x++) {
        for (let y = claim.y; y < claim.y + claim.h; y++) {
            points.add(`${x},${y}`)
        }
    }

    let intersection = new Set([...points].filter(x => pointsCoveredByAtLeastTwoClaims.has(x)))

    if (intersection.size === 0) {
        console.log('part 2:', claim)
    }
}
