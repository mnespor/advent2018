'use strict'

const R = require('ramda')

const readLines = require('util/read-lines')

const claimExpression = /(\d+)\D+(\d+),(\d+): (\d+)x(\d+)/
const claim = line => {
    const match = line.match(claimExpression)
    if (match == null) {
        return { x: 0, y: 0, w: 0, h: 0 }
    }

    const [ nope, nah, x, y, w, h ] = R.map(R.unary(parseInt), match)
    return { x, y, w, h }
}

const input = readLines('input/03.txt')
const claims = R.map(claim, input)
const containsPoint = (claim, x, y) => {
    return x > claim.x && y > claim.y && x <= claim.x + claim.w && y <= claim.y + claim.h
}

let total = 0
for (let x = 0; x <= 1000; x++) {
    for (let y = 0; y <= 1000; y++) {
        // R.pipe(R.filter(predicate), R.tail, R.head) but without making intermediate colls
        let foundOne = false
        for (let claim of claims) {
            if (containsPoint(claim, x, y)) {
                if (foundOne) {
                    total++
                    break
                }

                foundOne = true
            }
        }
    }
}

console.log('part 1:', total)
