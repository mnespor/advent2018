'use strict'

const R = require('ramda')

const readLines = require('util/read-lines')

const claimExpression = /(\d+)\D+(\d+),(\d+): (\d+)x(\d+)/
const claim = line => {
    const [ nope, nah, x, y, w, h ] = R.map(R.unary(parseInt), line.match(claimExpression))
    return { x, y, w, h }
}

const input = readLines('input/03.txt')

const makeRow = () => R.repeat(0, 1000)
const emptyGrid = R.times(makeRow, 1000)
const claims = R.map(claim)
const addClaim = (grid, claim) => {
    for (let x = claim.x; x < x + claim.w; x++) {
        for (let y = claim.y; y < y + claim.h; y++) {
            grid[x][y] = grid[x][y] || 1
        }
    }

    return grid
}

// const grid = R.transduce(claims, addClaim, emptyGrid, input)
for (let line of input) {
    addClaim(emptyGrid, claim(line))
}

const sum2d = R.compose(R.sum, R.map, R.sum)

const total = sum2d(emptyGrid)
