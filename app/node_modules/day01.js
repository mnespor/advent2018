'use strict'

const fs = require('fs')
const R = require('ramda')

const readLines = require('util/read-lines')

const readInt = R.unary(parseInt)
const validNumbersTransducer = R.compose(R.map(readInt), R.reject(isNaN))
const sumStrings = R.transduce(validNumbersTransducer, R.add, 0)

const sampleInput = ['+1', '-2', '0', '-5']
console.log('sample:', sumStrings(sampleInput))

const input = readLines('input/01.txt')
console.log('part 1:', sumStrings(input))

const scanReducer = (f, acc, current) => (acc, current) => R.append(f(R.last(acc), current), acc)
const frequencies = R.transduce(validNumbersTransducer, scanReducer(R.add), [0])
console.log('sample:', frequencies(sampleInput))

// `acc` has shape { seen: { 1: true, -1: true, 27: true }, value: 27 }
const firstDuplicateReducer = (f, acc, current) => (acc, current) => {
    const value = f(acc.value, current)
    const next = {
        seen: R.assoc(value, true, acc.seen),
        value
    }

    if (acc.seen[next.value]) {
        return R.reduced(R.assoc('success', value, next))
    }

    return next
}

const firstDuplicate = R.transduce(validNumbersTransducer, firstDuplicateReducer(R.add), { seen: {}, value: 0 })

console.log('sample:', firstDuplicate(sampleInput))
console.log('part 2:' firstDuplicate())
